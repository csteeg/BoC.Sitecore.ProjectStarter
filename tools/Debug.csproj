<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <SkipSitecore Condition=" '$(SkipSitecore)' == '' ">False</SkipSitecore>
    <ProductVersion>
    </ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{A1E53A8E-E801-44BE-BDA9-2511B3410899}</ProjectGuid>
    <ProjectTypeGuids>{349c5851-65df-11da-9384-00065b846f21};{fae04ec0-301f-11d3-bf4b-00c04f79efbc}</ProjectTypeGuids>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>Debug</RootNamespace>
    <AssemblyName>Debug</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <UseIISExpress>true</UseIISExpress>
    <IISExpressSSLPort />
    <IISExpressAnonymousAuthentication />
    <IISExpressWindowsAuthentication />
    <IISExpressUseClassicPipelineMode />
    <UseGlobalApplicationHostFile />
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>..\..\temp\output</OutputPath>
    <BaseIntermediateOutputPath>..\..\temp\</BaseIntermediateOutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>..\..\temp\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System.Web.DynamicData" />
    <Reference Include="System.Web.Entity" />
    <Reference Include="System.Web.ApplicationServices" />
    <Reference Include="System.ComponentModel.DataAnnotations" />
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Core" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="System.Web.Extensions" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Drawing" />
    <Reference Include="System.Web" />
    <Reference Include="System.Xml" />
    <Reference Include="System.Configuration" />
    <Reference Include="System.Web.Services" />
    <Reference Include="System.EnterpriseServices" />
  </ItemGroup>
  <ItemGroup>
    <Folder Include="Properties\" />
  </ItemGroup>
  <ItemGroup>
    <Content Include="web.config">
      <SubType>Designer</SubType>
    </Content>
  </ItemGroup>
  <PropertyGroup>
    <VisualStudioVersion Condition="'$(VisualStudioVersion)' == ''">10.0</VisualStudioVersion>
    <VSToolsPath Condition="'$(VSToolsPath)' == ''">$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)</VSToolsPath>
  </PropertyGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <Import Project="$(VSToolsPath)\WebApplications\Microsoft.WebApplication.targets" Condition="'$(VSToolsPath)' != ''" />
  <Import Project="$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v10.0\WebApplications\Microsoft.WebApplication.targets" Condition="false" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{349c5851-65df-11da-9384-00065b846f21}">
        <WebProjectProperties>
          <UseIIS>True</UseIIS>
          <AutoAssignPort>True</AutoAssignPort>
          <DevelopmentServerPort>61010</DevelopmentServerPort>
          <DevelopmentServerVPath>/</DevelopmentServerVPath>
          <IISUrl>http://localhost:61010/</IISUrl>
          <NTLMAuthentication>False</NTLMAuthentication>
          <UseCustomServer>False</UseCustomServer>
          <CustomServerUrl>
          </CustomServerUrl>
          <SaveServerSettingsInUserFile>False</SaveServerSettingsInUserFile>
        </WebProjectProperties>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
  <!-- This simple inline task does nothing. -->
  <UsingTask TaskName="GetSolutionProjects" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll">
    <ParameterGroup>
      <SolutionFile Required="true" />
      <Output ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Collections.Generic" />
      <Using Namespace="System.Text.RegularExpressions" />
      <Using Namespace="System.IO" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Code Type="Fragment" Language="cs"><![CDATA[
        const string SolutionFolderProjectType = "{2150E333-8FDC-42A3-9474-1A3956D46DE8}";
        const string ExtractProjectsFromSolutionRegex = @"Project\(""(?<ProjectTypeGUID>.+?)""\)\s*=\s*""(?<ProjectName>.+?)""\s*,\s*""(?<ProjectFile>.+?)""\s*,\s*""(?<ProjectGUID>.+?)""";

            if (!File.Exists(SolutionFile))
            {
                Log.LogError("Solution not found", SolutionFile);
                return false;
            }
            string solutionFolder = Path.GetDirectoryName(SolutionFile);

            string solutionText = File.ReadAllText(SolutionFile);
            MatchCollection matches = Regex.Matches(solutionText, ExtractProjectsFromSolutionRegex);
            List<ITaskItem> taskItems = new List<ITaskItem>();

            for(int i=0; i<matches.Count; i++)
            {
                string projectPathRelativeToSolution = matches[i].Groups["ProjectFile"].Value;
                string projectPathOnDisk = Path.Combine(solutionFolder, projectPathRelativeToSolution);
                string projectFile = projectPathRelativeToSolution;
                string projectName = matches[i].Groups["ProjectName"].Value;
                string projectGUID = matches[i].Groups["ProjectGUID"].Value;
                string projectTypeGUID = matches[i].Groups["ProjectTypeGUID"].Value;

                // do not include Solution Folders in output
                if (projectTypeGUID.Equals(SolutionFolderProjectType, StringComparison.OrdinalIgnoreCase))
                {
                    continue;
                }

                ITaskItem project = new TaskItem(projectPathOnDisk);
                project.SetMetadata("ProjectPath", projectFile);
                project.SetMetadata("ProjectFullPath", projectPathOnDisk);
                project.SetMetadata("ProjectName", projectName);
                project.SetMetadata("ProjectGUID", projectGUID);
				taskItems.Add(project);
            }

            Output = taskItems.ToArray();
            return true;
]]></Code>
    </Task>
  </UsingTask>
  <UsingTask TaskName="UnZip" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll">
    <ParameterGroup>
      <ZipFile ParameterType="Microsoft.Build.Framework.ITaskItem" Required="true" />
      <OutputDir Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.IO.Compression.FileSystem" />
      <Code Type="Fragment" Language="cs"><![CDATA[
        System.IO.Compression.ZipFile.ExtractToDirectory(this.ZipFile.ItemSpec, this.OutputDir);
      ]]></Code>
    </Task>
  </UsingTask>
  <Target Name="GetProjectsFromSolution">
    <GetSolutionProjects SolutionFile="$(SolutionPath)">
      <Output ItemName="_ProjectFiles" TaskParameter="Output" />
    </GetSolutionProjects>
    <ItemGroup>
      <ProjectFiles Include="@(_ProjectFiles)" Condition="'%(ProjectFullPath)' != '$(MSBuildProjectFullPath)'" />
    </ItemGroup>
    <Message Text="'%(ProjectFiles.ProjectFullPath)' == '$(MSBuildProjectFullPath)'" />
  </Target>
  <Target Name="ModifyApplicationHost" Condition="'$(SkipSitecore)' == 'False'">
    <PropertyGroup>
      <IIS_USER_HOME Condition="'$(IIS_USER_HOME)' == ''">$(USERPROFILE)\Documents\IISExpress</IIS_USER_HOME>
      <ApplicationHostConfig Condition="'$(ApplicationHostConfig)' == ''">$(IIS_USER_HOME)\config\applicationhost.config</ApplicationHostConfig>
    </PropertyGroup>
    <XmlPeek XmlInputPath="$(ApplicationHostConfig)" Query="/configuration/system.applicationHost/sites/site/application/virtualDirectory[@physicalPath='$(MSBuildProjectDirectory)']/../../bindings/binding/@bindingInformation">
      <Output TaskParameter="Result" PropertyName="DevelopmentServerBinding" />
    </XmlPeek>
    <PropertyGroup>
      <DevelopmentServerPort Condition="'$(DevelopmentServerBinding)' != '' AND '$(DevelopmentServerPort)' == ''">$([System.Text.RegularExpressions.Regex]::Match($(DevelopmentServerBinding), '\:\d+\:'))</DevelopmentServerPort>
    </PropertyGroup>
    <XmlPoke Condition="'$(DevelopmentServerPort)' != ''" XmlInputPath="$(ApplicationHostConfig)" Query="/configuration/system.applicationHost/sites/site/application/virtualDirectory[@physicalPath='$(MSBuildProjectDirectory)']/../../bindings/binding/@bindingInformation" Value="*$(DevelopmentServerPort)" />
    <Message Text="Current DevelopmentServerBinding: *$(DevelopmentServerPort)" />
    <Message Text="Trying to set any domain for this port (should be running as admin for this)" />
    <Exec Command="netsh http add urlacl url=http://*:$(DevelopmentServerPort.Replace(':', ''))/ user=everyone" ContinueOnError="True" />
    <!--Message Text="Current config file content:" />
      <Message Text="$(ConfigContent)" /-->
  </Target>
  <Target Name="Build" DependsOnTargets="ModifyApplicationHost;GetProjectsFromSolution">
    <ItemGroup>
      <emptyTargets Include="$(SolutionDir)packages\BoC.Sitecore.ProjectStarter*\tools\empty.targets" />
    </ItemGroup>
    <PropertyGroup>
      <emptyTargetFile>%(emptyTargets.Identity)</emptyTargetFile>
    </PropertyGroup>
    <Message Text="Current solution = $(SolutionPath)" />
    <Message Text="Current solutionfolder = $(SolutionDir)" />
    <Message Text="MSBuildThisFileFullPath = $(MSBuildThisFileFullPath)" />
    <Message Text="Empty targets file = $(emptyTargetFile)" />
    <MSBuild Projects="%(ProjectFiles.ProjectFullPath)" Targets="PipelinePreDeployCopyAllFilesToOneFolder" Properties="CustomBeforeMicrosoftCommonTargets=$(emptyTargetFile);Configuration=$(Configuration);_PackageTempDir=$(OutDir)%(ProjectFiles.ProjectName);PackageAsSingleFile=False;CreateHardLinksForCopyFilesToOutputDirectoryIfPossible=True;CreateHardLinksForCopyAdditionalFilesIfPossible=True;CreateHardLinksForCopyLocalIfPossible=True;CreateHardLinksForPublishFilesIfPossible=True;" ContinueOnError="False" />
    <ItemGroup>
      <DeployFiles Include="$(OutDir)%(ProjectFiles.ProjectName)\**\*.*" Exclude="$(OutDir)%(ProjectFiles.ProjectName)\web.config;$(OutDir)%(ProjectFiles.ProjectName)\packages.config" />
      <!--BinFiles Include="$(OutDir)%(ProjectFiles.ProjectName)\bin\**" /-->
      <!--DeployFiles Include="$(OutDir)%(ProjectFiles.ProjectName)\**\*.*" Exclude="$(OutDir)%(ProjectFiles.ProjectName)\bin\**;$(OutDir)%(ProjectFiles.ProjectName)\web.config;$(OutDir)%(ProjectFiles.ProjectName)\packages.config" /-->
    </ItemGroup>
    <Message Text="Resetting file attributes for config files" Condition="'$(SkipSitecore)' == 'False'" />
    <Exec Command="attrib /S /D /L -H &quot;$(SolutionDir)build\website\App_Config\*.*&quot;" Condition="Exists('$(SolutionDir)build\website\App_Config')" />
    <!--PropertyGroup>
      <SrcFolder>$([System.IO.Path]::GetDirectoryName('%(ProjectFiles.ProjectFullPath)'))</SrcFolder>
    </PropertyGroup-->
    <!--ItemGroup-->
    <!--TargetFiles Include="@(DeployFiles->'$(MSBuildThisFileDirectory)%(RecursiveDir)%(Filename)%(Extension)')" /-->
    <!--FolderStructure Include="@(DeployFiles->'$(MSBuildThisFileDirectory)%(RecursiveDir)')" /-->
    <!--SrcFiles Include="@(DeployFiles->'%(RelativeDir)%(Filename)%(Extension)'->Replace('$(OutDir)', '$(SolutionDir)src\'))" /-->
    <!--LinkCommands Include="@(DeployFiles->'mklink /H &quot;$(MSBuildThisFileDirectory)%(RecursiveDir)%(Filename)%(Extension)&quot; &quot;%(RelativeDir)%(Filename)%(Extension)&quot;'->Replace('$(OutDir)', '$(SolutionDir)src\'))" /-->
    <!--/ItemGroup-->
    <!--RemoveDuplicates Inputs="@(FolderStructure)">
      <Output TaskParameter="Filtered" ItemName="UniqueDirs"/>
    </RemoveDuplicates-->
    <!--Delete Files="@(TargetFiles)" /-->
    <!--MakeDir Directories="@(FolderStructure)" /-->
    <!--Exec Command="%(LinkCommands.Identity)" /-->
    <!--Copy SourceFiles="@(BinFiles)" DestinationFiles="@(BinFiles -> '$(MSBuildThisFileDirectory)bin\%(RecursiveDir)%(Filename)%(Extension)')" SkipUnchangedFiles="True" /-->
    <Copy SourceFiles="@(DeployFiles)" DestinationFiles="@(DeployFiles -> '$(MSBuildThisFileDirectory)%(RecursiveDir)%(Filename)%(Extension)')" SkipUnchangedFiles="True" />
    <Copy SourceFiles="$(OutDir)%(ProjectFiles.ProjectName)\web.config" Condition="Exists('$(OutDir)%(ProjectFiles.ProjectName)\web.config')" DestinationFolder="$(MSBuildThisFileDirectory)" SkipUnchangedFiles="True" UseHardLinksIfPossible="True" />
    <MakeDir Directories="$(MSBuildThisFileDirectory)sitecore\shell\override" Condition="!Exists('$(MSBuildThisFileDirectory)sitecore\shell\override')" />
    <MakeDir Directories="$(SolutionDir)SitecoreItems" Condition="!Exists('$(SolutionDir)SitecoreItems')" />
    <!--<RemoveDir Condition="Exists('$(SolutionDir)build\data\serialization') AND Exists('$(SolutionDir)SitecoreItems')" Directories="$(SolutionDir)build\data\serialization" ContinueOnError="true" />
    <Exec Command="mklink /J &quot;$(SolutionDir)build\data\serialization&quot; &quot;$(SolutionDir)SitecoreItems&quot;" Condition="Exists('$(SolutionDir)SitecoreItems') AND '$(SkipSitecore)' == 'False'" />
    <MakeDir Directories="$(SolutionDir)build\data\serialization" Condition="!Exists('$(SolutionDir)build\data\serialization')" />-->
    <!--Exec Command="mklink /J &quot;$(SolutionDir)SitecoreItems&quot; &quot;$(SolutionDir)build\data\serialization&quot;" Condition="!Exists('$(SolutionDir)SitecoreItems')" /-->
  </Target>
  <Target Name="CopySitecoreModule">
    <Message Text="CopySitecoreModule for $(TargetPath)" Importance="high" />
    <PropertyGroup Condition=" '$(TargetPath)' != '' ">
      <TargetFullPath>$(SolutionDir)Build\Website\$(TargetPath.Substring($(TargetPath.IndexOf('\'))))</TargetFullPath>
    </PropertyGroup>
    <Message Text="CopySitecoreModule $(ItemFullPath) -&gt; $(TargetFullPath)" Importance="high" Condition=" '$(TargetPath)' != '' " />
    <Copy Condition=" '$(TargetPath)' != '' and ( !$(TargetPath.Contains('Views\')) or !Exists('$(TargetFullPath)') )" SourceFiles="$(ItemFullPath)" DestinationFolder="$([System.IO.Path]::GetDirectoryName('$(TargetFullPath)'))" ContinueOnError="true" SkipUnchangedFiles="True" />
  </Target>
  <Target Name="Clean">
    <Message Text="Cleaning sitecore installation" />
    <ItemGroup>
      <SelectFile Include="$(SolutionDir)packages\BoC.Sitecore.ProjectStarter*\tools\SelectFile.exe" />
    </ItemGroup>
    <MakeDir Directories="$(SolutionDir)temp\" Condition="!Exists('$(SolutionDir)temp')" />
    <PropertyGroup>
      <SelectFileOutput>$([System.Guid]::NewGuid().ToString().Replace("{", "").Replace("-", "").Replace("}", ""))</SelectFileOutput>
    </PropertyGroup>
    <!--Delete Files="@(FilesToDelete)" /-->
    <Message Condition="'$(SkipSitecore)' == 'False' AND !Exists('$(SolutionDir)temp\extracted')" Text="Toolspath: %(SelectFile.FullPath) =&gt; $(SolutionDir)packages\BoC.Sitecore.ProjectStarter.*.*\tools\SelectFile.exe" />
    <Exec Condition="'$(SkipSitecore)' == 'False' AND !Exists('$(SolutionDir)temp\extracted')" command="&quot;%(SelectFile.FullPath)&quot; &quot;Zip files (*.zip)| *.zip&quot; &quot;Select sitecore zip installation&quot; &gt; $(SolutionDir)temp\$(SelectFileOutput)" />
    <PropertyGroup Condition="Exists('$(SolutionDir)temp\$(SelectFileOutput)')">
      <Sitecorezip>$([System.IO.File]::ReadAllText("$(SolutionDir)temp\$(SelectFileOutput)").Trim())</Sitecorezip>
    </PropertyGroup>
    <Delete Condition="Exists('$(SolutionDir)temp\$(SelectFileOutput)')" Files="$(SolutionDir)temp\$(SelectFileOutput)" ContinueOnError="true" />
    <Message Condition="!Exists('$(SolutionDir)temp\extracted')" Text="Extracting Sitecorezip: $(Sitecorezip) to $(SolutionDir)temp\extracted" />
    <Unzip Condition="!Exists('$(SolutionDir)temp\extracted') AND Exists('$(Sitecorezip)')" ZipFile="$(Sitecorezip)" OutputDir="$(SolutionDir)temp\extracted" />
    <PropertyGroup Condition="Exists('$(SolutionDir)temp\extracted')">
      <ExtractedFolder>$([System.IO.Directory]::GetDirectories('$(SolutionDir)temp\extracted')[0])</ExtractedFolder>
    </PropertyGroup>
    <Message Text="Copying self ($(MSBuildThisFileFullPath)) to $(ExtractedFolder)\website" Condition="'$(SkipSitecore)' == 'False' AND Exists($(ExtractedFolder))" />
    <Move SourceFiles="$(MSBuildThisFileFullPath)" DestinationFolder="$(ExtractedFolder)\website" Condition="'$(SkipSitecore)' == 'False' AND Exists($(ExtractedFolder))" />
    <ItemGroup Condition="'$(SkipSitecore)' == 'True' OR Exists($(ExtractedFolder))">
      <ClearSitecore Include="$(SolutionDir)build\**\*.*" Exclude="$(SolutionDir)build\website\App_Data\*;$(SolutionDir)build\website\App_Data\**\*;$(SolutionDir)build\data\**\*.*;$(SolutionDir)build\data\*.*;$(SolutionDir)build\website\*.csproj" />
    </ItemGroup>
    <Delete Files="@(ClearSitecore)" Condition="'$(SkipSitecore)' == 'True' OR Exists($(ExtractedFolder))" ContinueOnError="True" />
    <Delete Files="@(ClearSitecore)" Condition="'$(SkipSitecore)' == 'True' OR Exists($(ExtractedFolder))" ContinueOnError="True" />
    <ItemGroup Condition="'$(SkipSitecore)' == 'False' AND Exists($(ExtractedFolder))">
      <Extracted Include="$(ExtractedFolder)\**\*.*" Exclude="$(ExtractedFolder)\data\*.*;$(ExtractedFolder)\data\**\*.*" Condition="Exists('$(SolutionDir)build\data')" />
      <Extracted Include="$(ExtractedFolder)\**\*.*" Condition="!Exists('$(SolutionDir)build\data')" />
    </ItemGroup>
    <Message Text="Copying $(ExtractedFolder)\ to $(SolutionDir)build" Condition="Exists($(ExtractedFolder))" />
    <Copy SkipUnchangedFiles="True" SourceFiles="@(Extracted)" DestinationFiles="@(Extracted -> '$(SolutionDir)build\%(RecursiveDir)%(Filename)%(Extension)')" Condition="'$(SkipSitecore)' == 'False' AND Exists($(ExtractedFolder))" />
    <ItemGroup Condition="Exists($(ExtractedFolder))">
      <ExistingDatabases Include="$(SolutionDir)build\Website\App_Data\*.*" />
      <Databases Include="$(SolutionDir)build\Databases\*.*" Exclude="@(ExistingDatabases -> '$(SolutionDir)build\Databases\%(FileName)%(Extension)')" />
    </ItemGroup>
    <Message Text="Copying databases @(Databases)" Condition="'$(SkipSitecore)' == 'False' AND Exists($(ExtractedFolder))" />
    <Copy SourceFiles="@(Databases)" DestinationFolder="$(SolutionDir)build\Website\App_Data" Condition="'$(SkipSitecore)' == 'False' AND Exists($(ExtractedFolder))" />
    <PropertyGroup>
      <SelectFileOutput>$([System.Guid]::NewGuid().ToString().Replace("{", "").Replace("-", "").Replace("}", ""))</SelectFileOutput>
    </PropertyGroup>
    <Exec Condition="'$(SkipSitecore)' == 'False' AND !Exists('$(SolutionDir)build\data\license.xml')" command="&quot;%(SelectFile.FullPath)&quot; &quot;Sitecore license file (license.xml)| license.xml&quot; &quot;Select sitecore license file&quot; &gt; $(SolutionDir)temp\$(SelectFileOutput)" />
    <PropertyGroup Condition="'$(SkipSitecore)' == 'False' AND !Exists('$(SolutionDir)build\data\license.xml')">
      <Sitecorelicense>$([System.IO.File]::ReadAllText("$(SolutionDir)temp\$(SelectFileOutput)").Trim())</Sitecorelicense>
    </PropertyGroup>
    <Message Condition="'$(SkipSitecore)' == 'False'" Text="Copying $(Sitecorelicense) to $(SolutionDir)build\data\license.xml" />
    <Copy SkipUnchangedFiles="True" SourceFiles="$(Sitecorelicense)" DestinationFiles="$(SolutionDir)build\data\license.xml" Condition="'$(SkipSitecore)' == 'False' AND Exists($(Sitecorelicense))" />
    <Delete Condition="Exists('$(SolutionDir)temp\$(SelectFileOutput)')" Files="$(SolutionDir)temp\$(SelectFileOutput)" ContinueOnError="true" />
    <!-- copying modules -->
    <ItemGroup>
      <DeployModules Include="$(SolutionDir)SitecoreModules\**" />
    </ItemGroup>
    <Msbuild Targets="CopySitecoreModule" Projects="$(MSBuildProjectFile)" Properties="ItemFullPath=%(DeployModules.FullPath);TargetPath=%(DeployModules.RecursiveDir)%(DeployModules.Filename)%(DeployModules.Extension)" />
  </Target>
</Project>